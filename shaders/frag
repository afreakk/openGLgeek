#version 150
in vec2 Texcoord;
out vec4 outColor;
uniform sampler2D image;
in vec3 hlp;
uniform float speed;
const float lowerer = 0.00001;
in vec3 Position_worldspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
in vec3 Normal_cameraspace;
void main()
{
	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( LightDirection_cameraspace );
	// Cosine of the angle between the normal and the light direction,
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0,1 );
  vec2 res = vec2(800,600);
  vec2 uv = gl_FragCoord.xy/res;
  vec4 tex = texture(image,Texcoord);
  outColor = tex*cosTheta;
  //outColor = vec4(1.0);
}
