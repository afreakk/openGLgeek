#version 150
in vec3 position;
in vec2 texcoord;
in vec3 normal;
uniform float speed;
out vec2 Texcoord;
uniform mat4 model;
uniform mat4 view;
uniform mat4 proj;
out vec3 hlp;
uniform vec3 LightPosition_worldspace;
out vec3 Position_worldspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;
out vec3 Normal_cameraspace;
void main() {
  hlp = position;
  Texcoord = texcoord;
  vec3 poz = position;
  poz.x *= sin(poz.z*3.14*((cos(speed)/2.0+1.0)*0.1)+speed*2.0)/2.0+1.0;
  poz.y *= cos(poz.z*3.14*((sin(speed)/2.0+1.0)*0.1)+speed*2.0)/2.0+1.0;
  gl_Position = proj * view * model * vec4( poz, 1.0 );

  // Position of the vertex, in worldspace : M * poz
  Position_worldspace = (model * vec4(poz,1)).xyz;

  // Vector that goes from the vertex to the camera, in camera space.
  // In camera space, the camera is at the origin (0,0,0).
  vec3 vertexPosition_cameraspace = ( view * model * vec4(poz,1)).xyz;
  EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;

  // Vector that goes from the vertex to the light, in camera space. M is ommited because it's identity.
  vec3 LightPosition_cameraspace = ( view * vec4(LightPosition_worldspace,1)).xyz;
  LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;

  // Normal of the the vertex, in camera space
  Normal_cameraspace = ( view * model * vec4(normal,0)).xyz; // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.

}
